{
    "AWSTemplateFormatVersion" : "2010-09-09",

    "Description" : "AWS CloudFormation Sample Template for Creating EC2 instances in private subnet.",
    "Parameters" : {
        "KeyName": {
            "Description" : "Name of an existing EC2 key pair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
        },
        "InstanceType" : {
            "Description" : "EC2 instance type",
            "Type" : "String",
            "Default" : "t2.micro",
            "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
            ,
            "ConstraintDescription" : "must be a valid EC2 instance type."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "10.0.1.0/24",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the for x.x.x.x/x."
        },
        "ServerCapacity": {
            "Default": "2",
            "Description" : "The initial number of servers instances",
            "Type": "Number",
            "MinValue": "2",
            "MaxValue": "4",
            "ConstraintDescription" : "must be between 2 and 4 EC2 instances."
        },
        "VpcId": {
            "Description": "The VPC ID",
            "Type": "AWS::EC2::VPC::Id"
        },
        "PrivateSubnetIds": {
            "Description": "Private subnetId where EC2 instance to be hosted",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnetIds": {
            "Description": "Public subnetId where ELB is hosted",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "Role": {
            "Default": "application",
            "Description": "Chef-solo role to apply to instances.",
            "Type": "String"
        }
    },

    "Mappings" : {
        "AWSInstanceType2Arch" : {
            "t1.micro"    : { "Arch" : "PV64"   },
            "t2.nano"     : { "Arch" : "HVM64"  },
            "t2.micro"    : { "Arch" : "HVM64"  },
            "t2.small"    : { "Arch" : "HVM64"  },
            "t2.medium"   : { "Arch" : "HVM64"  },
            "t2.large"    : { "Arch" : "HVM64"  },
            "m1.small"    : { "Arch" : "PV64"   },
            "m1.medium"   : { "Arch" : "PV64"   },
            "m1.large"    : { "Arch" : "PV64"   },
            "m1.xlarge"   : { "Arch" : "PV64"   },
            "m2.xlarge"   : { "Arch" : "PV64"   },
            "m2.2xlarge"  : { "Arch" : "PV64"   },
            "m2.4xlarge"  : { "Arch" : "PV64"   },
            "m3.medium"   : { "Arch" : "HVM64"  },
            "m3.large"    : { "Arch" : "HVM64"  },
            "m3.xlarge"   : { "Arch" : "HVM64"  },
            "m3.2xlarge"  : { "Arch" : "HVM64"  },
            "m4.large"    : { "Arch" : "HVM64"  },
            "m4.xlarge"   : { "Arch" : "HVM64"  },
            "m4.2xlarge"  : { "Arch" : "HVM64"  },
            "m4.4xlarge"  : { "Arch" : "HVM64"  },
            "m4.10xlarge" : { "Arch" : "HVM64"  },
            "c1.medium"   : { "Arch" : "PV64"   },
            "c1.xlarge"   : { "Arch" : "PV64"   },
            "c3.large"    : { "Arch" : "HVM64"  },
            "c3.xlarge"   : { "Arch" : "HVM64"  },
            "c3.2xlarge"  : { "Arch" : "HVM64"  },
            "c3.4xlarge"  : { "Arch" : "HVM64"  },
            "c3.8xlarge"  : { "Arch" : "HVM64"  },
            "c4.large"    : { "Arch" : "HVM64"  },
            "c4.xlarge"   : { "Arch" : "HVM64"  },
            "c4.2xlarge"  : { "Arch" : "HVM64"  },
            "c4.4xlarge"  : { "Arch" : "HVM64"  },
            "c4.8xlarge"  : { "Arch" : "HVM64"  },
            "g2.2xlarge"  : { "Arch" : "HVMG2"  },
            "g2.8xlarge"  : { "Arch" : "HVMG2"  },
            "r3.large"    : { "Arch" : "HVM64"  },
            "r3.xlarge"   : { "Arch" : "HVM64"  },
            "r3.2xlarge"  : { "Arch" : "HVM64"  },
            "r3.4xlarge"  : { "Arch" : "HVM64"  },
            "r3.8xlarge"  : { "Arch" : "HVM64"  },
            "i2.xlarge"   : { "Arch" : "HVM64"  },
            "i2.2xlarge"  : { "Arch" : "HVM64"  },
            "i2.4xlarge"  : { "Arch" : "HVM64"  },
            "i2.8xlarge"  : { "Arch" : "HVM64"  },
            "d2.xlarge"   : { "Arch" : "HVM64"  },
            "d2.2xlarge"  : { "Arch" : "HVM64"  },
            "d2.4xlarge"  : { "Arch" : "HVM64"  },
            "d2.8xlarge"  : { "Arch" : "HVM64"  },
            "hi1.4xlarge" : { "Arch" : "HVM64"  },
            "hs1.8xlarge" : { "Arch" : "HVM64"  },
            "cr1.8xlarge" : { "Arch" : "HVM64"  },
            "cc2.8xlarge" : { "Arch" : "HVM64"  }
        },

        "AWSInstanceType2NATArch" : {
            "t1.micro"    : { "Arch" : "NATPV64"   },
            "t2.nano"     : { "Arch" : "NATHVM64"  },
            "t2.micro"    : { "Arch" : "NATHVM64"  },
            "t2.small"    : { "Arch" : "NATHVM64"  },
            "t2.medium"   : { "Arch" : "NATHVM64"  },
            "t2.large"    : { "Arch" : "NATHVM64"  },
            "m1.small"    : { "Arch" : "NATPV64"   },
            "m1.medium"   : { "Arch" : "NATPV64"   },
            "m1.large"    : { "Arch" : "NATPV64"   },
            "m1.xlarge"   : { "Arch" : "NATPV64"   },
            "m2.xlarge"   : { "Arch" : "NATPV64"   },
            "m2.2xlarge"  : { "Arch" : "NATPV64"   },
            "m2.4xlarge"  : { "Arch" : "NATPV64"   },
            "m3.medium"   : { "Arch" : "NATHVM64"  },
            "m3.large"    : { "Arch" : "NATHVM64"  },
            "m3.xlarge"   : { "Arch" : "NATHVM64"  },
            "m3.2xlarge"  : { "Arch" : "NATHVM64"  },
            "m4.large"    : { "Arch" : "NATHVM64"  },
            "m4.xlarge"   : { "Arch" : "NATHVM64"  },
            "m4.2xlarge"  : { "Arch" : "NATHVM64"  },
            "m4.4xlarge"  : { "Arch" : "NATHVM64"  },
            "m4.10xlarge" : { "Arch" : "NATHVM64"  },
            "c1.medium"   : { "Arch" : "NATPV64"   },
            "c1.xlarge"   : { "Arch" : "NATPV64"   },
            "c3.large"    : { "Arch" : "NATHVM64"  },
            "c3.xlarge"   : { "Arch" : "NATHVM64"  },
            "c3.2xlarge"  : { "Arch" : "NATHVM64"  },
            "c3.4xlarge"  : { "Arch" : "NATHVM64"  },
            "c3.8xlarge"  : { "Arch" : "NATHVM64"  },
            "c4.large"    : { "Arch" : "NATHVM64"  },
            "c4.xlarge"   : { "Arch" : "NATHVM64"  },
            "c4.2xlarge"  : { "Arch" : "NATHVM64"  },
            "c4.4xlarge"  : { "Arch" : "NATHVM64"  },
            "c4.8xlarge"  : { "Arch" : "NATHVM64"  },
            "g2.2xlarge"  : { "Arch" : "NATHVMG2"  },
            "g2.8xlarge"  : { "Arch" : "NATHVMG2"  },
            "r3.large"    : { "Arch" : "NATHVM64"  },
            "r3.xlarge"   : { "Arch" : "NATHVM64"  },
            "r3.2xlarge"  : { "Arch" : "NATHVM64"  },
            "r3.4xlarge"  : { "Arch" : "NATHVM64"  },
            "r3.8xlarge"  : { "Arch" : "NATHVM64"  },
            "i2.xlarge"   : { "Arch" : "NATHVM64"  },
            "i2.2xlarge"  : { "Arch" : "NATHVM64"  },
            "i2.4xlarge"  : { "Arch" : "NATHVM64"  },
            "i2.8xlarge"  : { "Arch" : "NATHVM64"  },
            "d2.xlarge"   : { "Arch" : "NATHVM64"  },
            "d2.2xlarge"  : { "Arch" : "NATHVM64"  },
            "d2.4xlarge"  : { "Arch" : "NATHVM64"  },
            "d2.8xlarge"  : { "Arch" : "NATHVM64"  },
            "hi1.4xlarge" : { "Arch" : "NATHVM64"  },
            "hs1.8xlarge" : { "Arch" : "NATHVM64"  },
            "cr1.8xlarge" : { "Arch" : "NATHVM64"  },
            "cc2.8xlarge" : { "Arch" : "NATHVM64"  }
        }
        ,
        "AWSRegionArch2AMI" : {
            "us-east-1"        : {"PV64" : "ami-2a69aa47", "HVM64" : "ami-6869aa05", "HVMG2" : "ami-a41a3fb3"},
            "us-west-2"        : {"PV64" : "ami-7f77b31f", "HVM64" : "ami-7172b611", "HVMG2" : "ami-caf253aa"},
            "us-west-1"        : {"PV64" : "ami-a2490dc2", "HVM64" : "ami-31490d51", "HVMG2" : "ami-00347e60"},
            "eu-west-1"        : {"PV64" : "ami-4cdd453f", "HVM64" : "ami-f9dd458a", "HVMG2" : "ami-e2f7bd91"},
            "eu-central-1"     : {"PV64" : "ami-6527cf0a", "HVM64" : "ami-ea26ce85", "HVMG2" : "ami-d2ff04bd"},
            "ap-northeast-1"   : {"PV64" : "ami-3e42b65f", "HVM64" : "ami-374db956", "HVMG2" : "ami-4c78d52d"},
            "ap-northeast-2"   : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-2b408b45", "HVMG2" : "NOT_SUPPORTED"},
            "ap-southeast-1"   : {"PV64" : "ami-df9e4cbc", "HVM64" : "ami-a59b49c6", "HVMG2" : "ami-f3f95990"},
            "ap-southeast-2"   : {"PV64" : "ami-63351d00", "HVM64" : "ami-dc361ebf", "HVMG2" : "ami-3a122e59"},
            "ap-south-1"       : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-ffbdd790", "HVMG2" : "ami-21a7d34e"},
            "us-east-2"        : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-f6035893", "HVMG2" : "NOT_SUPPORTED"},
            "sa-east-1"        : {"PV64" : "ami-1ad34676", "HVM64" : "ami-6dd04501", "HVMG2" : "NOT_SUPPORTED"},
            "cn-north-1"       : {"PV64" : "ami-77559f1a", "HVM64" : "ami-8e6aa0e3", "HVMG2" : "NOT_SUPPORTED"}
        }

    },

    "Resources" : {
        "ElasticLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Metadata" : {
                "Comment1" : "Configure the Load Balancer with a simple health check",
                "Comment2" : "Use install path for healthcheck to avoid redirects - ELB healthcheck does not handle 302 return codes"
            },
            "Properties" : {
                "Subnets" : [ {"Ref": "PublicSubnetIds"}],
                "CrossZone" : "true",
                "Listeners" : [ {
                    "LoadBalancerPort" : "80",
                    "InstancePort" : "80",
                    "Protocol" : "HTTP"
                },{
                    "LoadBalancerPort" : "443",
                    "InstancePort" : "443",
                    "Protocol" : "TCP"
                },{
                    "LoadBalancerPort" : "8080",
                    "InstancePort" : "8080",
                    "Protocol" : "HTTP"
                }],
                "HealthCheck" : {
                    "Target" : "HTTP:8080/",
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "5",
                    "Interval" : "10",
                    "Timeout" : "5"
                },
                "SecurityGroups":[{"Ref":"MyELBSecurityGroups"}],
                "Tags": [{
                    "Key": "Name",
                    "Value": "ElasticLoadBalancer"
                }]
            }
        },

        "MyEC2AutoScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : { "Fn::GetAZs" : "AWS::Region" },
                "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
                "MinSize" : "2",
                "MaxSize" : "4",
                "DesiredCapacity" : { "Ref" : "ServerCapacity" },
                "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ],
                "VPCZoneIdentifier": [{"Ref": "PrivateSubnetIds"}],
                "Tags": [
                    {
                        "Key": "Name",
                        "PropagateAtLaunch": "true",
                        "Value": "MyEC2Instance"
                    }
                ]
            },
            "CreationPolicy" : {
                "ResourceSignal" : {
                    "Timeout" : "PT15M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": "2",
                    "MaxBatchSize": "2",
                    "PauseTime" : "PT15M",
                    "WaitOnResourceSignals": "true"
                }
            }
        },

        "LaunchConfig": {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
                "AWS::CloudFormation::Init" : {
                    "configSets" : {
                        "application_install" :["install_cfn", "install_chef_solo", "install_chef_repo", "run_chef"]
                    },
                    "install_cfn" : {
                        "files": {
                            "/etc/cfn/cfn-hup.conf": {
                                "content": { "Fn::Join": [ "", [
                                    "[main]\n",
                                    "stack=", { "Ref": "AWS::StackId" }, "\n",
                                    "region=", { "Ref": "AWS::Region" }, "\n"
                                ]]},
                                "mode"  : "000400",
                                "owner" : "root",
                                "group" : "root"
                            },
                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                "content": { "Fn::Join": [ "", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v ",
                                    "         --stack ", { "Ref" : "AWS::StackName" },
                                    "         --resource LaunchConfig ",
                                    "         --configsets application_install ",
                                    "         --region ", { "Ref" : "AWS::Region" }, "\n"
                                ]]},
                                "mode"  : "000400",
                                "owner" : "root",
                                "group" : "root"
                            }
                        },
                        "services" : {
                            "sysvinit" : {
                                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                    "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
                            }
                        }
                    },
                    "install_chef_solo" : {
                        "files": {
                            "/tmp/install.sh": {
                                "source": "https://www.opscode.com/chef/install.sh",
                                "mode": "000400",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands" : {
                            "01_install_chef_solo" : {
                                "command" : "bash /tmp/install.sh",
                                "cwd"  : "/usr/bin"
                            }
                        }
                    },
                    "install_chef_repo" : {
                        "sources" : {
                            "/var/chef/chef-repo" : "https://s3-us-west-1.amazonaws.com/kie-chef-repo/chef-repo.zip"
                        },
                        "files": {

                        },
                        "commands": {
                            "01_create_chef_logs_directory":{
                                "command" : "mkdir chef",
                                "cwd" : "/var/log",
                                "env" : { "HOME" : "/var/chef" }
                            }

                        }
                    },
                    "run_chef":{
                        "commands" : {
                            "01_run_chef_solo" : {
                                "command": { "Fn::Join": [ "", [ "/usr/bin/chef-solo -c /var/chef/chef-repo/config/solo.rb -o 'role[", { "Ref": "Role" }, "]'" ] ]},
                                "cwd" : "/var/chef/chef-repo"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                    { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "InstanceType"   : { "Ref" : "InstanceType" },
                "SecurityGroups" : [ {"Ref" : "MyEC2ServerSecurityGroup"} ],
                "KeyName"        : { "Ref" : "KeyName" },
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    "yum update -y aws-cfn-bootstrap\n",

                    "/opt/aws/bin/cfn-init -v ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource LaunchConfig ",
                    "         --configsets application_install ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",

                    "/opt/aws/bin/cfn-signal -e $? ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource MyEC2AutoScalingGroup ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]}}
            }
        },

        "MyELBSecurityGroups" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable HTTP and HTTPS to ELB",
                "VpcId":{"Ref": "VpcId"},
                "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
                    {"IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : "0.0.0.0/0" },
                    {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" }
                ]
            }
        },

        "MyEC2ServerSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable HTTP and HTTPS access via port 80/443 locked down to the load balancer + SSH access",
                "VpcId":{"Ref": "VpcId"},
                "SecurityGroupIngress" : [
                    {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80",  "SourceSecurityGroupId": {"Ref": "MyELBSecurityGroups"} },
                    {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "SourceSecurityGroupId": {"Ref": "MyELBSecurityGroups"}  },
                    {"IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080",  "SourceSecurityGroupId": {"Ref": "MyELBSecurityGroups"} },
                    {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "10.0.1.0/24"}
                ]
            }
        }
    },

    "Outputs" : {
        "WebsiteURL" : {
            "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]},
            "Description" : "Java"
        }
    }
}
